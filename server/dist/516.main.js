"use strict";exports.id=516,exports.ids=[516],exports.modules={516:(t,o,r)=>{r.r(o),r.d(o,{default:()=>s});var e=r(185),c=r.n(e),i=r(913);(async()=>{await c().connect(i.Z.mongodb.path)})().catch((t=>{throw console.log(t),new Error("error con mongoose")}));const n=new e.Schema({id:{type:Number,required:!0},timestamp:{type:Number},productos:{type:Array}}),s=class extends class{constructor(t,o){this.create=async()=>{try{const t=await this.getAllCart();let o;o=0==t.length?1:Number(t[t.length-1].id)+1;const r={id:o,timestamp:Date.now(),productos:[]},e=new this.collection(r);return await e.save(),o}catch(t){throw console.log(t),new Error("No se pudo crear")}},this.getAllCart=async()=>{try{return await this.collection.find()}catch(t){throw console.log(t),new Error("Error")}},this.getCartById=async t=>{try{const o=await this.getAllCart(),r=o.findIndex((o=>o.id===t)),e=o[r]._id;return this.collection.findById(e)}catch(t){throw console.log(t),new Error("error")}},this.addProduct=async(t,o)=>{try{const r=o,e=await this.getAllCart(),c=e.findIndex((o=>o.id===t)),i=e[c].productos,n=i.findIndex((t=>t.id===o.id));if(-1!=n){const o=i[n].precio;i[n].stock?(i[n].stock++,i[n].precio=o*i[n].stock,await this.collection.updateOne({id:t},{$set:{productos:i}})):(i[n].stock=2,i[n].precio=o*i[n].stock,await this.collection.updateOne({id:t},{$set:{productos:i}}))}else i.push(r),await this.collection.updateOne({id:t},{$set:{productos:i}})}catch(t){throw console.log(t),new Error("Error adding product")}},this.getAllProdById=async t=>{try{const o=await this.collection.findOne({id:t}),r=null==o?void 0:o.productos;if(r)return r;throw new Error("No existe el carrito")}catch(t){throw new Error("Error pidiendo los datos")}},this.deleteCartById=async t=>{try{const o=await this.getAllCart(),r=o.findIndex((o=>o.id==t)),e=o[r]._id;return 0!==o.length&&r>=0&&(await this.collection.deleteOne({_id:e}),!0)}catch(t){throw console.log(t),new Error("No se pudo eliminar")}},this.deleteProdById=async(t,o)=>{try{const r=await this.getAllCart(),e=r.findIndex((o=>o.id==t));if(e>=0){const c=r[e].productos,i=c.findIndex((t=>t.id==o));return i>=0&&(c.splice(i,1),await this.collection.updateOne({id:t},{$set:{productos:c}}),!0)}return!1}catch(t){throw new Error("Error borrando el producto")}},this.deleteAllCarts=async()=>{try{return await this.collection.remove(),!0}catch(t){throw console.log(t),new Error("error deleting all carts")}},this.collection=c().model(t,o)}}{constructor(){super("cart",n)}}}};